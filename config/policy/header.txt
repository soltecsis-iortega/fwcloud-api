#!/bin/sh
#############################################
##                                         ##
##  FWCloud.net                            ##
##  https://fwcloud.net                    ##
##  info@fwcloud.net                       ##
##                                         ##
##  Developed by SOLTECSIS, S.L.           ##
##  https://soltecsis.com                  ##
##  info@soltecsis.com                     ##
##                                         ##
#############################################

LSMOD=`which lsmod 2>/dev/null`
MODPROBE=`which modprobe 2>/dev/null`
IPTABLES=`which iptables 2>/dev/null`
IP6TABLES=`which ip6tables 2>/dev/null`
NFT=`which nft 2>/dev/null`
IP=`which ip 2>/dev/null`
SYSTEMCTL=`which systemctl 2>/dev/null`
SYSCTL=`which sysctl 2>/dev/null`

SYSTEMD_FILE="/etc/systemd/system/fwcloud.service"
SYSTEMD_FILE_ROUTING="/etc/systemd/system/fwcloud-routing.service"

if [ -z "$HOSTNAME" ]; then
  HOSTNAME=`hostname`
fi

log() {
  echo "$1"
  which "$LOGGER" >/dev/null 2>&1 && $LOGGER -p info "$1"
}

check_cmds() {
  test -z "$LSMOD" && echo "ERROR: Command 'lsmod' not found." && exit 1
  test -z "$MODPROBE" && echo "ERROR: Command 'modprobe' not found." && exit 1
  test -z "$IP" && echo "ERROR: Command 'ip' not found." && exit 1
  test "$POLICY_COMPILER" = "IPTables" -a -z "$IPTABLES" && echo "ERROR: Policy compiler is $POLICY_COMPILER, but command 'iptables' not found." && exit 1
  test "$POLICY_COMPILER" = "NFTables" -a -z "$NFT" && echo "ERROR: Policy compiler is $POLICY_COMPILER, but command 'nft' not found." && exit 1
}

iptables_default_filter_policy() {
  if [ ! -z "$IPTABLES" -a -f "$IPTABLES" -a -x "$IPTABLES" ]; then
    $IPTABLES  -P OUTPUT  $1
    $IPTABLES  -P INPUT   $1
    $IPTABLES  -P FORWARD $1
  fi

  if [ ! -z "$IPTABLES6" -a -f "$IPTABLES6" -a -x "$IPTABLES6" ]; then
    $IP6TABLES -P OUTPUT  $1
    $IP6TABLES -P INPUT   $1
    $IP6TABLES -P FORWARD $1
  fi
}

load_nat_modules() {
  if [ ! -f "/etc/issue" -a -f "/etc/openwrt_version" ]; then
    MODULES_DIR="/lib/modules/`uname -r`/"
  else
    MODULES_DIR="/lib/modules/`uname -r`/kernel/net/"
  fi
  MODULES=$(find $MODULES_DIR -name '*nat*'| sed  -e 's/^.*\///' -e 's/\([^\.]\)\..*/\1/')
  for module in $MODULES; do
    if $LSMOD | grep ${module} >/dev/null; then continue; fi
    $MODPROBE ${module} ||  exit 1
  done
}

reset_iptables_v4() { 
  if [ ! -z "$IPTABLES" -a -f "$IPTABLES" -a -x "$IPTABLES" ]; then
    $IPTABLES --flush
    $IPTABLES -X
    $IPTABLES --flush
    $IPTABLES --flush FORWARD
    $IPTABLES --flush INPUT
    $IPTABLES --flush OUTPUT
    $IPTABLES --table nat --flush
    $IPTABLES --table nat --delete-chain
    $IPTABLES --table mangle --flush
    $IPTABLES --table mangle --delete-chain
    $IPTABLES --delete-chain
  fi
}

reset_iptables_v6() {
  if [ ! -z "$IPTABLES6" -a -f "$IPTABLES6" -a -x "$IPTABLES6" ]; then
    IPv6_TABLES="filter nat mangle"
    for table in $IPv6_TABLES; do
      $IP6TABLES -t $table -L -n | while read c chain rest; do
          if test "X$c" = "XChain" ; then
            $IP6TABLES -t $table -F $chain
        fi
      done
      $IP6TABLES -t $table -X
    done
  fi
}

reset_nft() {
  if [ -f "$NFT" ]; then
    $NFT flush ruleset arp
    $NFT flush ruleset ip
    $NFT flush ruleset ip6
    $NFT flush ruleset bridge
    $NFT flush ruleset inet
  fi
}

policy_empty() {
  reset_iptables_v4
  reset_iptables_v6
  reset_nft
}

create_systemd_service() {
cat > "$SYSTEMD_FILE" << EOL
[Unit]
Description=FWCloud.net management script

# Start before Network Interfaces coming up
Before=network-pre.target
Wants=network-pre.target
After=local-fs.target

# Do not start after basic.target!
DefaultDependencies=no

[Service]
ExecStart=/etc/fwcloud/fwcloud.sh policy
ExecStop=/etc/fwcloud/fwcloud.sh stop

# Just Execute the shell script
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOL
}

create_systemd_service_routing() {
cat > "$SYSTEMD_FILE_ROUTING" << EOL
[Unit]
Description=FWCloud.net routing management script

# Start after network and openvpn service.
Requires=network.target
After=network.target

# Do not start after basic.target!
DefaultDependencies=no

[Service]
ExecStart=/etc/fwcloud/fwcloud.sh routing

# Just Execute the shell script
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOL
}

check_docker_iptables_disabled() {
  DOCKER_CFG="/etc/docker/daemon.json"
  if [ ! -f $DOCKER_CFG ]; then
    echo
    echo "********"
    echo "WARNING: Docker configuration file ($DOCKER_CFG) not found."
    echo "********"
    echo
    return
  fi

  IPTABLES_VALUE=`grep iptables $DOCKER_CFG | sed -r 's/[ {}"]//gi' | awk -F":" '{print $2}'`
  if [ "$IPTABLES_VALUE" != "false" ]; then
    echo
    echo "********"
    echo "WARNING: IPTables not disabled in Docker configuration."
    echo "********"
    echo
    return
  fi
}

status() {
  NL=`$IPTABLES -nL | wc -l`
  if [ $NL -lt 9 ]; then
    echo "ERROR: Policy not loaded"
    exit 1
  else
    echo "OK. Policy loaded."
  fi 
}

policy_apply() {
  load_nat_modules
  policy_empty
  policy_load
  options_load
}
